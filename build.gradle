plugins {
    id 'java'
    id 'application'
    id 'jacoco'
    id 'org.sonarqube' version '3.3'
    id 'com.palantir.docker' version '0.26.0'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

sourceCompatibility = 11
targetCompatibility = 11

ext {
    gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
    jarPathForOCI = relativePath(tasks.shadowJar.outputs.files.singleFile)
    // versions
    testContainersVersion = '1.16.2'
}

if (gitBranch != 'main' && gitBranch != 'master' && ! (gitBranch ==~ '(release|hotfix|support)/.*')) {
    version += '-NEXT-SNAPSHOT'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://nexus.iex.ec/repository/maven-public/"
    }
    maven { url 'https://jitpack.io' }
}

configurations {
    // itest configuration (inherit from test)
    integrationTestCompile.extendsFrom testCompile
    integrationTestImplementation.extendsFrom testImplementation
    // itest configuration (lombok, ..)
    integrationTestCompileOnly.extendsFrom compileOnly
    integrationTestAnnotationProcessor.extendsFrom annotationProcessor
}

dependencies {
    // iexec
    compile "com.iexec.common:iexec-common:$iexecCommonVersion"

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:27.1-jre'

    // Dropbox
    compile 'com.dropbox.core:dropbox-core-sdk:3.1.1'

    // lombok
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.10'
    annotationProcessor "org.projectlombok:lombok:1.18.10"
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.11.2'
    
    //rest template
    compile group: 'org.springframework', name: 'spring-web', version: '5.2.4.RELEASE'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.4'

    // test
    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.0'

    // itest only
    integrationTestCompile "org.testcontainers:testcontainers:${testContainersVersion}"
    integrationTestCompile "org.testcontainers:junit-jupiter:${testContainersVersion}"
    integrationTestCompile 'com.github.tomakehurst:wiremock-jre8:2.28.1'
    integrationTestCompile 'org.awaitility:awaitility:4.1.1'

}

test {
    useJUnitPlatform()
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
}

jacoco {
    toolVersion = "0.8.7"
}
// sonarqube code coverage requires jacoco XML report
jacocoTestReport {
    reports {
        xml.enabled true
    }
}
tasks.test.finalizedBy    tasks.jacocoTestReport
tasks.sonarqube.dependsOn tasks.jacocoTestReport

def mainClass = 'com.iexec.worker.tee.post.compute.App'

application {
    mainClassName = mainClass
}

//gradle run
application {
    // Define the main class for the application.
    mainClass = mainClass
}

// Jar with missing dependencies (app.jar)
jar {
    manifest {
        attributes(
                'Main-Class': mainClass
        )
    }
}

def app = 'app'
def fatJar = "${app}-all.jar"

// Jar with all dependencies (app-all.jar)
shadowJar {
    mainClassName = mainClass
    archiveBaseName.set(app)
    archiveVersion.set('') // remove version from name
}

docker {
    name 'nexus.iex.ec/' + rootProject.name + ':dev'
    dockerfile file('docker/Dockerfile.local')
    files('build/libs/' + fatJar)
    buildArgs([JAR_PATH: fatJar ])
}
tasks.docker.dependsOn tasks.build

task buildImage {
    dependsOn tasks.docker
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir 'src/itest/java'
        }
        resources.srcDir 'src/itest/resources'
    }
}

task itestSetup(type: Exec) {
    commandLine 'echo', 'up'
}

task itestTeardown(type: Exec) {
    commandLine 'echo', 'down'
}

task itest(type: Test) {
    group 'Verification'
    description 'Runs the integration tests.'
    dependsOn   itestSetup, buildImage
    finalizedBy itestTeardown
    setTestClassesDirs(sourceSets.integrationTest.output)
    classpath = sourceSets.integrationTest.runtimeClasspath
    useJUnitPlatform()
}
