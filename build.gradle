plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'io.freefair.lombok' version '8.6'
    id 'jacoco'
    id 'org.sonarqube' version '5.0.0.4638'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

ext {
    ociImageBase = 'local/' + rootProject.name
    ociImageName = ociImageBase + ':dev'
    ociTeeImageName = ociImageBase + '-unlocked:dev'
    // versions
    testContainersVersion = '1.19.0'
    mockitoVersion = '4.4.0'
    systemStubsVersion = '2.0.1'
}

if (!project.hasProperty('gitBranch')) {
    ext.gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
}

if (gitBranch != 'main' && gitBranch != 'master' && !(gitBranch ==~ '(release|hotfix|support)/.*')) {
    version += '-NEXT-SNAPSHOT'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://docker-regis-adm.iex.ec/repository/maven-public/"
        credentials {
            username nexusUser
            password nexusPassword
        }
    }
    maven { url 'https://jitpack.io' }
}

dependencies {
    // iexec
    implementation "com.iexec.commons:iexec-commons-poco:$iexecCommonsPocoVersion"
    implementation "com.iexec.common:iexec-common:$iexecCommonVersion"

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:27.1-jre'

    // Dropbox
    implementation 'com.dropbox.core:dropbox-core-sdk:3.1.1'

    // Apache Commons-lang3
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    //rest template
    implementation 'org.springframework:spring-web:5.2.4.RELEASE'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.4'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
    sourceCompatibility = "11"
    targetCompatibility = "11"
}

tasks.withType(Tar).configureEach {
    enabled = false
}

testing {
    suites {
        configureEach {
            dependencies {
                implementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
                implementation "uk.org.webcompere:system-stubs-core:$systemStubsVersion"    // activates env var setting
                implementation "uk.org.webcompere:system-stubs-jupiter:$systemStubsVersion" // activates env var setting
            }
        }
        test {
            useJUnitJupiter()
            dependencies {
                implementation 'org.junit.jupiter:junit-jupiter:5.8.2'
                implementation "org.mockito:mockito-inline:$mockitoVersion" // activates mocking final classes/methods
            }
        }
        itest(JvmTestSuite) {
            dependencies {
                implementation project()
                implementation "com.iexec.common:iexec-common:$iexecCommonVersion"
                implementation 'com.github.tomakehurst:wiremock-jre8:2.28.1'
                implementation 'org.awaitility:awaitility:4.1.1'
                implementation "org.testcontainers:testcontainers:${testContainersVersion}"
                implementation "org.testcontainers:junit-jupiter:${testContainersVersion}"
            }
        }
    }
}

tasks.withType(Test).configureEach {
    finalizedBy jacocoTestReport
}

// sonarqube code coverage requires jacoco XML report
jacocoTestReport {
    reports {
        xml.required = true
    }
}
tasks.sonarqube.dependsOn tasks.jacocoTestReport

//gradle run
application {
    // Define the main class for the application.
    mainClass.set('com.iexec.worker.compute.post.Main')
}

// Jar with missing dependencies (app.jar)
jar {
    manifest {
        attributes 'Main-Class': 'com.iexec.worker.compute.post.Main'
    }
}

// Jar with all dependencies (app-all.jar)
shadowJar {
    archiveBaseName.set('app')
    archiveVersion.set('') // remove version from name
}

ext.jarPathForOCI = relativePath(tasks.shadowJar.outputs.files.singleFile)

tasks.register('buildImage', Exec) {
    group 'Build'
    description 'Builds an OCI image from a Dockerfile.'
    dependsOn shadowJar
    commandLine 'docker', 'build', '--build-arg', 'jar=' + jarPathForOCI, '-t', ociImageName, '.'
}

tasks.register('buildSconeImage', Exec) {
    dependsOn buildImage
    environment 'IMG_FROM', ociImageName
    environment 'IMG_TO', ociTeeImageName
    commandLine 'docker/sconify.sh'
}
