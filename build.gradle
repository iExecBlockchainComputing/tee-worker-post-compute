import org.apache.tools.ant.filters.ReplaceTokens

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.5.1/userguide/tutorial_java_projects.html
 */
buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
    }
}

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application
    id 'application'
}

apply plugin: 'com.github.johnrengelman.shadow'

sourceCompatibility = 8
targetCompatibility = 8

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:27.1-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

    // Dropbox
    compile 'com.dropbox.core:dropbox-core-sdk:3.1.1'
}

application {
    mainClassName = 'com.iexec.uploader.dropbox.App'
}

def imageName = "nexus.iex.ec/tee-dropbox-uploader"


project.ext.getDockerImageNameFull = {
    def imageNameWithVersion = imageName + ":${version}"
    return imageNameWithVersion
}

task prepareDockerFile(type: Copy) {
    from 'src/main/resources/'
    into 'build/resources/main/'
    filter(ReplaceTokens, tokens: [projectversion: "${version}".toString()])
}

task buildImage(type: Exec) {
    description 'Building a dropbox-uploader Docker image'
    commandLine("sh", "-c", "docker image build -f build/resources/main/Dockerfile -t " + getDockerImageNameFull() + " . ")
}

buildImage.dependsOn prepareDockerFile