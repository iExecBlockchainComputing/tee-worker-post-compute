plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'io.freefair.lombok' version '6.6.1'
    id 'jacoco'
    id 'org.sonarqube' version '3.3'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

ext {
    jarPathForOCI = relativePath(tasks.shadowJar.outputs.files.singleFile)
    ociImageBase = 'local/' + rootProject.name
    ociImageName = ociImageBase + ':dev'
    ociTeeImageName = ociImageBase + '-unlocked:dev'
    // versions
    testContainersVersion = '1.16.2'
    mockitoVersion = '4.4.0'
    systemStubsVersion = '2.0.1'
}

if (!project.hasProperty('gitBranch')) {
    ext.gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
}

if (gitBranch != 'main' && gitBranch != 'master' && ! (gitBranch ==~ '(release|hotfix|support)/.*')) {
    version += '-NEXT-SNAPSHOT'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://docker-regis-adm.iex.ec/repository/maven-public/"
        credentials {
            username nexusUser
            password nexusPassword
        }
    }
    maven {
        url "https://nexus.intra.iex.ec/repository/maven-public/"
    }
    maven { url 'https://jitpack.io' }
}

sourceSets {
    itest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    // itest configuration (inherit from test)
    itestCompile.extendsFrom testCompile
    itestImplementation.extendsFrom testImplementation
    // itest configuration (lombok, ..)
    itestCompileOnly.extendsFrom compileOnly
    itestAnnotationProcessor.extendsFrom annotationProcessor
}

dependencies {
    // iexec
    implementation "com.iexec.commons:iexec-commons-poco:$iexecCommonsPocoVersion"
    implementation "com.iexec.common:iexec-common:$iexecCommonVersion"

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:27.1-jre'

    // Dropbox
    implementation 'com.dropbox.core:dropbox-core-sdk:3.1.1'

    // Apache Commons-lang3
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    //rest template
    implementation 'org.springframework:spring-web:5.2.4.RELEASE'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.4'

    // test
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation "uk.org.webcompere:system-stubs-core:$systemStubsVersion"    // activates env var setting
    testImplementation "uk.org.webcompere:system-stubs-jupiter:$systemStubsVersion" // activates env var setting
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
    testImplementation "org.mockito:mockito-inline:$mockitoVersion" // activates mocking final classes/methods

    // itest only
    itestImplementation "org.testcontainers:testcontainers:${testContainersVersion}"
    itestImplementation "org.testcontainers:junit-jupiter:${testContainersVersion}"
    itestImplementation 'com.github.tomakehurst:wiremock-jre8:2.28.1'
    itestImplementation 'org.awaitility:awaitility:4.1.1'

}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

tasks.withType(Tar).configureEach {
    enabled = false
}

tasks.withType(Test).configureEach {
    finalizedBy jacocoTestReport
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.7"
}
// sonarqube code coverage requires jacoco XML report
jacocoTestReport {
    reports {
        xml.required = true
    }
}
tasks.sonarqube.dependsOn tasks.jacocoTestReport

def mainClass = 'com.iexec.worker.tee.post.compute.Main'

application {
    mainClass = mainClass
}

//gradle run
application {
    // Define the main class for the application.
    mainClass = mainClass
}

// Jar with missing dependencies (app.jar)
jar {
    manifest {
        attributes(
                'Main-Class': mainClass
        )
    }
}

// Jar with all dependencies (app-all.jar)
shadowJar {
    mainClassName = mainClass
    archiveBaseName.set('app')
    archiveVersion.set('') // remove version from name
}

ext.jarPathForOCI  = relativePath(tasks.shadowJar.outputs.files.singleFile)

task buildImage(type: Exec) {
    group 'Build'
    description 'Builds an OCI image from a Dockerfile.'
    dependsOn shadowJar
    commandLine 'docker', 'build', '--build-arg', 'jar=' + jarPathForOCI, '-t', ociImageName, '.'
}

task buildTeeImage(type: Exec) {
    dependsOn buildImage
    environment 'IMG_FROM', ociImageName
    environment 'IMG_TO', ociTeeImageName
    commandLine 'docker/sconify.sh'
}

task itest(type: Test) {
    group 'Verification'
    description 'Runs the integration tests.'
    dependsOn buildImage
    testClassesDirs = sourceSets.itest.output.classesDirs
    classpath = sourceSets.itest.runtimeClasspath
}
