/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.iexec.uploader.dropbox;

import com.iexec.uploader.dropbox.uploader.UploaderService;
import com.iexec.uploader.dropbox.utils.FilesUtils;
import lombok.extern.slf4j.Slf4j;

import static com.iexec.uploader.dropbox.signer.SignerService.signEnclaveChallengeAndWriteSignature;
import static com.iexec.uploader.dropbox.uploader.UploaderService.DROPBOX_STORAGE;
import static com.iexec.uploader.dropbox.utils.EnvUtils.getEnvVarOrExit;

//TODO - Rename Github: dropbox-uploader -> tee-post-compute
@Slf4j
public class App {

    public static void main(String[] args) {
        log.info("Tee-post-compute started");
        String taskId = getEnvVarOrExit("TASK_ID");
        log.info("(Uploader & Signer) [taskId:{}]", taskId);

        log.info("DEBUG - env: " + System.getenv().toString());

        log.info("Uploader started");
        String storageLocation = getEnvVarOrExit("IEXEC_REQUESTER_STORAGE_LOCATION");

        boolean isUploaded;

        switch (storageLocation) {
            case DROPBOX_STORAGE:
                isUploaded = uploadWithDropbox();
                break;
            default:
                log.info("Default result storage provider");
                isUploaded = uploadWithDropbox();
                break;
        }

        if (!isUploaded) {
            System.err.println("Uploader failed (exiting)");
            System.exit(1);
        } else {
            log.info("Uploaded!");
        }

        log.info("Signer started");
        String teeChallengePrivateKey = getEnvVarOrExit("TEE_CHALLENGE_PRIVATE_KEY");
        String workerAddress = getEnvVarOrExit("WORKER_ADDRESS");

        boolean isSignatureFileCreated = signEnclaveChallengeAndWriteSignature(teeChallengePrivateKey, taskId, workerAddress);
        if (!isSignatureFileCreated) {
            System.err.println("Signer failed (exiting)");
            System.exit(1);
        } else {
            log.info("Signed!");
        }

        System.exit(0);
    }

    private static boolean uploadWithDropbox() {
        log.info("Will use Dropbox");
        String taskId = getEnvVarOrExit("TASK_ID");
        String dropboxAccessToken = getEnvVarOrExit("DROPBOX_ACCESS_TOKEN");
        String remoteFilename = taskId + ".zip";

        return UploaderService.uploadToDropBox(FilesUtils.getResultFilePath(taskId), dropboxAccessToken, remoteFilename);
    }


}
